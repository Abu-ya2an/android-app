apply plugin: 'com.android.application'
apply plugin: 'io.sentry.android.gradle'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

apply plugin: "androidx.navigation.safeargs.kotlin"

def keystoreProperties = new Properties()
if (new File("keystore.properties").exists()) {
    keystoreProperties.load(new FileInputStream(rootProject.file("keystore.properties")))
} else {
    keystoreProperties.load(new FileInputStream(rootProject.file("fakekeystore.properties")))
}

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['release.key.alias']
            keyPassword keystoreProperties['release.key.password']
            storeFile file(keystoreProperties['release.store.file'])
            storePassword keystoreProperties['release.store.password']
        }
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "net.ivpn.client"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 79
        versionName "1.67"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        vectorDrawables.useSupportLibrary = true

        manifestPlaceholders = [ SENTRY_DSN:keystoreProperties['sentry.dsn']]
        buildConfigField "String", "BILLING_PUBLIC_KEY", keystoreProperties['billing.public.key']
        buildConfigField 'boolean', 'openvpn3', 'false'
//        externalNativeBuild {
//            cmake {
//                arguments '-DANDROID_TOOLCHAIN=clang',
//                        '-DANDROID_STL=c++_static'
//            }
//
//            ndk {
//                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
//            }
//        }
    }

    flavorDimensions "spread", "api"
    productFlavors {
        store {
            dimension "spread"
            buildConfigField "String", "BUILD_VARIANT", "\"store\""
        }

        site {
            dimension "spread"
            buildConfigField "String", "BUILD_VARIANT", "\"site\""
        }

        fdroid {
            dimension "spread"
            buildConfigField "String", "BUILD_VARIANT", "\"fdroid\""
        }

        production {
            dimension "api"
            buildConfigField "String", "BASE_URL", "\"api.ivpn.net\""
        }

        stage {
            dimension "api"
            buildConfigField "String", "BASE_URL", keystoreProperties['staging.url']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }

    sourceSets {
        main {
            jniLibs.srcDir 'src/main/libs'
            assets.srcDirs = ["src/main/assets", "build/ovpnassets"]
        }
    }

    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
    }
//    externalNativeBuild {
//        cmake {
//            path 'CMakeLists.txt'
//        }
//    }
    androidExtensions {
        experimental = true
    }

    splits {
        abi {
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            universalApk true
        }
    }
}

//def File registerGenTask(variantName, variantDirName) {
//    def baseDir = new File(buildDir, "generated/source/ovpn3swig/${variantDirName}")
//    def genDir = new File(baseDir, "net/openvpn/ovpn3")
//    task("generateOpenVPN3Swig${variantName}",type:Exec) {
//
//        def swigcmd = "swig"
//        if (file("/usr/local/bin/swig").exists())
//            swigcmd = "/usr/local/bin/swig"
//
//        doFirst {
//            mkdir genDir
//        }
//
//        commandLine swigcmd, "-outdir", genDir, "-outcurrentdir", "-c++", "-java", "-package", "net.openvpn.ovpn3",
//                "-Isrc/main/cpp/openvpn3/client", "-Isrc/main/cpp/openvpn3/",
//                "-o", "${genDir}/ovpncli_wrap.cxx", "-oh", "${genDir}/ovpncli_wrap.h",
//                "src/main/cpp/openvpn3/javacli/ovpncli.i"
//    }
//
//    return baseDir
//}
//
//android.applicationVariants.all { variant ->
//    def sourceDir = registerGenTask(variant.name, variant.baseName.replace("-", "/"))
//    def task = tasks.named("generateOpenVPN3Swig${variant.name}").get()
//
//    variant.registerJavaGeneratingTask(task, sourceDir)
//}

ext {
    supportLibsVersion = '28.0.0'
    streamsupportVersion = '1.7.1'
}
kapt {
    generateStubs = true
}

dependencies {
    def nav_version = "2.3.0-alpha04"
    def lifecycle_version = "2.2.0"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'

    // JSON Parsing
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
//    implementation 'com.google.android.material:material:1.2.0-alpha05'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'

    //Used to support stream API from JAVA8 and JAVA9
    implementation "net.sourceforge.streamsupport:android-retrofuture:$streamsupportVersion"
    implementation "net.sourceforge.streamsupport:android-retrostreams:$streamsupportVersion"

    //Sliding up panel
    implementation "androidx.coordinatorlayout:coordinatorlayout:1.1.0"
//    implementation 'com.sothree.slidinguppanel:library:3.4.0'

    //Constraint layout
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta4"

//    Purchases
    implementation 'com.android.billingclient:billing:2.2.0'
    
    //For crash logging
    implementation 'io.sentry:sentry-android-core:2.0.+'

    //QR support
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.1.0@aar'

    //Powerful library for logging
    implementation 'org.slf4j:slf4j-api:1.7.24'
    implementation 'org.slf4j:jul-to-slf4j:1.7.0'
    implementation 'com.github.tony19:logback-android:2.0.0'

    //Navigation component
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //Navigation component dynamic feature module support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    implementation "junit:junit:$rootProject.ext.junitVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"

    testImplementation 'org.powermock:powermock-api-mockito:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.2'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.2'

    //Dagger
    kapt 'com.google.dagger:dagger-compiler:2.24'
    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
}

repositories {
    mavenCentral()
}